import os
import sys
import django

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "parit.settings")
django.setup()

import asyncio
from apps.questions.models import Question
from apps.questions.utils.wrappers.leetcode.leetcode_wrapper import LeetcodeWrapper

blind_75 = ['contains-duplicate', 'valid-anagram', 'two-sum', 'group-anagrams', 'top-k-frequent-elements', 'encode-and-decode-strings', 'product-of-array-except-self', 'longest-consecutive-sequence', 'valid-palindrome', '3sum', 'container-with-most-water', 'best-time-to-buy-and-sell-stock', 'longest-substring-without-repeating-characters', 'longest-repeating-character-replacement', 'minimum-window-substring', 'valid-parentheses', 'find-minimum-in-rotated-sorted-array', 'search-in-rotated-sorted-array', 'reverse-linked-list', 'merge-two-sorted-lists', 'linked-list-cycle', 'reorder-list', 'remove-nth-node-from-end-of-list', 'merge-k-sorted-lists', 'invert-binary-tree', 'maximum-depth-of-binary-tree', 'same-tree', 'subtree-of-another-tree', 'lowest-common-ancestor-of-a-binary-search-tree', 'binary-tree-level-order-traversal', 'validate-binary-search-tree', 'kth-smallest-element-in-a-bst', 'construct-binary-tree-from-preorder-and-inorder-traversal', 'binary-tree-maximum-path-sum', 'serialize-and-deserialize-binary-tree', 'find-median-from-data-stream', 'combination-sum', 'word-search', 'implement-trie-prefix-tree', 'design-add-and-search-words-data-structure', 'word-search-ii', 'number-of-islands', 'clone-graph', 'pacific-atlantic-water-flow', 'course-schedule', 'graph-valid-tree', 'number-of-connected-components-in-an-undirected-graph', 'alien-dictionary', 'climbing-stairs', 'house-robber', 'house-robber-ii', 'longest-palindromic-substring', 'palindromic-substrings', 'decode-ways', 'coin-change', 'maximum-product-subarray', 'word-break', 'longest-increasing-subsequence', 'unique-paths', 'longest-common-subsequence', 'maximum-subarray', 'jump-game', 'insert-interval', 'merge-intervals', 'non-overlapping-intervals', 'meeting-rooms', 'meeting-rooms-ii', 'rotate-image', 'spiral-matrix', 'set-matrix-zeroes', 'number-of-1-bits', 'counting-bits', 'reverse-bits', 'missing-number', 'sum-of-two-integers']
neetcode_150 = ['contains-duplicate', 'valid-anagram', 'two-sum', 'group-anagrams', 'top-k-frequent-elements', 'encode-and-decode-strings', 'product-of-array-except-self', 'valid-sudoku', 'longest-consecutive-sequence', 'valid-palindrome', 'two-sum-ii-input-array-is-sorted', '3sum', 'container-with-most-water', 'trapping-rain-water', 'best-time-to-buy-and-sell-stock', 'longest-substring-without-repeating-characters', 'longest-repeating-character-replacement', 'permutation-in-string', 'minimum-window-substring', 'sliding-window-maximum', 'valid-parentheses', 'min-stack', 'evaluate-reverse-polish-notation', 'generate-parentheses', 'daily-temperatures', 'car-fleet', 'largest-rectangle-in-histogram', 'binary-search', 'search-a-2d-matrix', 'koko-eating-bananas', 'find-minimum-in-rotated-sorted-array', 'search-in-rotated-sorted-array', 'time-based-key-value-store', 'median-of-two-sorted-arrays', 'reverse-linked-list', 'merge-two-sorted-lists', 'linked-list-cycle', 'reorder-list', 'remove-nth-node-from-end-of-list', 'copy-list-with-random-pointer', 'add-two-numbers', 'find-the-duplicate-number', 'lru-cache', 'merge-k-sorted-lists', 'reverse-nodes-in-k-group', 'invert-binary-tree', 'maximum-depth-of-binary-tree', 'diameter-of-binary-tree', 'balanced-binary-tree', 'same-tree', 'subtree-of-another-tree', 'lowest-common-ancestor-of-a-binary-search-tree', 'binary-tree-level-order-traversal', 'binary-tree-right-side-view', 'count-good-nodes-in-binary-tree', 'validate-binary-search-tree', 'kth-smallest-element-in-a-bst', 'construct-binary-tree-from-preorder-and-inorder-traversal', 'binary-tree-maximum-path-sum', 'serialize-and-deserialize-binary-tree', 'kth-largest-element-in-a-stream', 'last-stone-weight', 'k-closest-points-to-origin', 'kth-largest-element-in-an-array', 'task-scheduler', 'design-twitter', 'find-median-from-data-stream', 'subsets', 'combination-sum', 'combination-sum-ii', 'permutations', 'subsets-ii', 'word-search', 'palindrome-partitioning', 'letter-combinations-of-a-phone-number', 'n-queens', 'implement-trie-prefix-tree', 'design-add-and-search-words-data-structure', 'word-search-ii', 'number-of-islands', 'max-area-of-island', 'clone-graph', 'walls-and-gates', 'rotting-oranges', 'pacific-atlantic-water-flow', 'surrounded-regions', 'course-schedule', 'course-schedule-ii', 'graph-valid-tree', 'number-of-connected-components-in-an-undirected-graph', 'redundant-connection', 'word-ladder', 'network-delay-time', 'reconstruct-itinerary', 'min-cost-to-connect-all-points', 'swim-in-rising-water', 'alien-dictionary', 'cheapest-flights-within-k-stops', 'climbing-stairs', 'min-cost-climbing-stairs', 'house-robber', 'house-robber-ii', 'longest-palindromic-substring', 'palindromic-substrings', 'decode-ways', 'coin-change', 'maximum-product-subarray', 'word-break', 'longest-increasing-subsequence', 'partition-equal-subset-sum', 'unique-paths', 'longest-common-subsequence', 'best-time-to-buy-and-sell-stock-with-cooldown', 'coin-change-ii', 'target-sum', 'interleaving-string', 'longest-increasing-path-in-a-matrix', 'distinct-subsequences', 'edit-distance', 'burst-balloons', 'regular-expression-matching', 'maximum-subarray', 'jump-game', 'jump-game-ii', 'gas-station', 'hand-of-straights', 'merge-triplets-to-form-target-triplet', 'partition-labels', 'valid-parenthesis-string', 'insert-interval', 'merge-intervals', 'non-overlapping-intervals', 'meeting-rooms', 'meeting-rooms-ii', 'minimum-interval-to-include-each-query', 'rotate-image', 'spiral-matrix', 'set-matrix-zeroes', 'happy-number', 'plus-one', 'powx-n', 'multiply-strings', 'detect-squares', 'single-number', 'number-of-1-bits', 'counting-bits', 'reverse-bits', 'missing-number', 'sum-of-two-integers', 'reverse-integer']
neetcode_250 = ['concatenation-of-array', 'contains-duplicate', 'valid-anagram', 'two-sum', 'longest-common-prefix', 'group-anagrams', 'remove-element', 'majority-element', 'design-hashset', 'design-hashmap', 'sort-an-array', 'sort-colors', 'top-k-frequent-elements', 'encode-and-decode-strings', 'range-sum-query-2d-immutable', 'product-of-array-except-self', 'valid-sudoku', 'longest-consecutive-sequence', 'best-time-to-buy-and-sell-stock-ii', 'majority-element-ii', 'subarray-sum-equals-k', 'first-missing-positive', 'reverse-string', 'valid-palindrome', 'valid-palindrome-ii', 'merge-strings-alternately', 'merge-sorted-array', 'remove-duplicates-from-sorted-array', 'two-sum-ii-input-array-is-sorted', '3sum', '4sum', 'rotate-array', 'container-with-most-water', 'boats-to-save-people', 'trapping-rain-water', 'contains-duplicate-ii', 'best-time-to-buy-and-sell-stock', 'longest-substring-without-repeating-characters', 'longest-repeating-character-replacement', 'permutation-in-string', 'minimum-size-subarray-sum', 'find-k-closest-elements', 'minimum-window-substring', 'sliding-window-maximum', 'baseball-game', 'valid-parentheses', 'implement-stack-using-queues', 'implement-queue-using-stacks', 'min-stack', 'evaluate-reverse-polish-notation', 'generate-parentheses', 'asteroid-collision', 'daily-temperatures', 'online-stock-span', 'car-fleet', 'simplify-path', 'decode-string', 'maximum-frequency-stack', 'largest-rectangle-in-histogram', 'binary-search', 'search-insert-position', 'guess-number-higher-or-lower', 'sqrtx', 'search-a-2d-matrix', 'koko-eating-bananas', 'capacity-to-ship-packages-within-d-days', 'find-minimum-in-rotated-sorted-array', 'search-in-rotated-sorted-array', 'search-in-rotated-sorted-array-ii', 'time-based-key-value-store', 'split-array-largest-sum', 'median-of-two-sorted-arrays', 'find-in-mountain-array', 'reverse-linked-list', 'merge-two-sorted-lists', 'linked-list-cycle', 'reorder-list', 'remove-nth-node-from-end-of-list', 'copy-list-with-random-pointer', 'add-two-numbers', 'find-the-duplicate-number', 'reverse-linked-list-ii', 'design-circular-queue', 'lru-cache', 'lfu-cache', 'merge-k-sorted-lists', 'reverse-nodes-in-k-group', 'binary-tree-inorder-traversal', 'binary-tree-preorder-traversal', 'binary-tree-postorder-traversal', 'invert-binary-tree', 'maximum-depth-of-binary-tree', 'diameter-of-binary-tree', 'balanced-binary-tree', 'same-tree', 'subtree-of-another-tree', 'lowest-common-ancestor-of-a-binary-search-tree', 'insert-into-a-binary-search-tree', 'delete-node-in-a-bst', 'binary-tree-level-order-traversal', 'binary-tree-right-side-view', 'construct-quad-tree', 'count-good-nodes-in-binary-tree', 'validate-binary-search-tree', 'kth-smallest-element-in-a-bst', 'construct-binary-tree-from-preorder-and-inorder-traversal', 'house-robber-iii', 'delete-leaves-with-a-given-value', 'binary-tree-maximum-path-sum', 'serialize-and-deserialize-binary-tree', 'kth-largest-element-in-a-stream', 'last-stone-weight', 'k-closest-points-to-origin', 'kth-largest-element-in-an-array', 'task-scheduler', 'design-twitter', 'single-threaded-cpu', 'reorganize-string', 'longest-happy-string', 'car-pooling', 'find-median-from-data-stream', 'ipo', 'sum-of-all-subset-xor-totals', 'subsets', 'combination-sum', 'combination-sum-ii', 'combinations', 'permutations', 'subsets-ii', 'permutations-ii', 'word-search', 'palindrome-partitioning', 'letter-combinations-of-a-phone-number', 'matchsticks-to-square', 'partition-to-k-equal-sum-subsets', 'n-queens', 'n-queens-ii', 'word-break-ii', 'implement-trie-prefix-tree', 'design-add-and-search-words-data-structure', 'extra-characters-in-a-string', 'word-search-ii', 'island-perimeter', 'verifying-an-alien-dictionary', 'find-the-town-judge', 'number-of-islands', 'max-area-of-island', 'clone-graph', 'walls-and-gates', 'rotting-oranges', 'pacific-atlantic-water-flow', 'surrounded-regions', 'open-the-lock', 'course-schedule', 'course-schedule-ii', 'graph-valid-tree', 'course-schedule-iv', 'number-of-connected-components-in-an-undirected-graph', 'redundant-connection', 'accounts-merge', 'evaluate-division', 'minimum-height-trees', 'word-ladder', 'path-with-minimum-effort', 'network-delay-time', 'reconstruct-itinerary', 'min-cost-to-connect-all-points', 'swim-in-rising-water', 'alien-dictionary', 'cheapest-flights-within-k-stops', 'find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree', 'build-a-matrix-with-conditions', 'greatest-common-divisor-traversal', 'climbing-stairs', 'min-cost-climbing-stairs', 'n-th-tribonacci-number', 'house-robber', 'house-robber-ii', 'longest-palindromic-substring', 'palindromic-substrings', 'decode-ways', 'coin-change', 'maximum-product-subarray', 'word-break', 'longest-increasing-subsequence', 'partition-equal-subset-sum', 'combination-sum-iv', 'perfect-squares', 'integer-break', 'stone-game-iii', 'unique-paths', 'unique-paths-ii', 'minimum-path-sum', 'longest-common-subsequence', 'last-stone-weight-ii', 'best-time-to-buy-and-sell-stock-with-cooldown', 'coin-change-ii', 'target-sum', 'interleaving-string', 'stone-game', 'stone-game-ii', 'longest-increasing-path-in-a-matrix', 'distinct-subsequences', 'edit-distance', 'burst-balloons', 'regular-expression-matching', 'lemonade-change', 'maximum-subarray', 'maximum-sum-circular-subarray', 'longest-turbulent-subarray', 'jump-game', 'jump-game-ii', 'jump-game-vii', 'gas-station', 'hand-of-straights', 'dota2-senate', 'merge-triplets-to-form-target-triplet', 'partition-labels', 'valid-parenthesis-string', 'candy', 'insert-interval', 'merge-intervals', 'non-overlapping-intervals', 'meeting-rooms', 'meeting-rooms-ii', 'meeting-rooms-iii', 'minimum-interval-to-include-each-query', 'excel-sheet-column-title', 'greatest-common-divisor-of-strings', 'insert-greatest-common-divisors-in-linked-list', 'transpose-matrix', 'rotate-image', 'spiral-matrix', 'set-matrix-zeroes', 'happy-number', 'plus-one', 'roman-to-integer', 'powx-n', 'multiply-strings', 'detect-squares', 'single-number', 'number-of-1-bits', 'counting-bits', 'add-binary', 'reverse-bits', 'missing-number', 'sum-of-two-integers', 'reverse-integer', 'bitwise-and-of-numbers-range', 'minimum-array-end']


Question.objects.all().delete() 
lcw = LeetcodeWrapper()
data = asyncio.run(lcw.get_questions(limit=30))
questions = data.questions

for q in questions:
    question_pools = ['LC_ALL']
    if q.title_slug in blind_75:
        question_pools.append("BLIND_75")
    if q.title_slug in neetcode_150:
        question_pools.append("NEETCODE_150")
    if q.title_slug in neetcode_250:
        question_pools.append("NEETCODE_250")
    try:
        Question.objects.create(
            ac_rate = q.ac_rate,
            content = q.content,
            difficulty = q.difficulty,
            is_paid = q.is_paid,
            link = q.link,
            title = q.title,
            title_slug = q.title_slug,
            topic_tags = q.topic_tags,
            pool_tag=question_pools
        )
    except Exception as e:
        print(e)